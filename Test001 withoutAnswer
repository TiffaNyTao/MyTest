//练习


/*  //写出程序结果
interface A{}

class B implements A
{
	public String fuc()
	{
		return "func";
	}
}

class Demo
{
	public static void main(String[] args)
	{
		A  a = new B();		
		System.out.println(a.func());
	}
}

*/      


/*  //写出程序结果

class Fu
{
	boolean show(char a)
	{
		System.out.println(a);
		return true;
	}
}

class Demo extends Fu
{
	public static void main(String[] args)
	{
		int i = 0;
		Fu f = new Demo();）
		Demo d = new Demo();
		for ( f.show('A'); f.show('B') && ( i < 2) ; f.show('C')) 
		{
			i++;
			d.show('D');
		}
	}

	boolean show(char a)
	{
		System.out.println(a);
		return false;
	}
}

//程序结果：A B
*/


/*	//写出程序结果

interface A
{
}

class B implements A
{
	public String test()
	{
		return "yes";
	}
}

class Demo
{
	static A get()
	{
		return new B();
	}
	public static void main(String[] args)
	{
		A a = get();
		System.out.println(a.test());
	}
}


*/

/*	//写出程序结果

class Super
{
	int i = 0;
	public Super(String a)
	{
		System.out.println("A");
		i = 1;
	}
	public Super()
	{
		System.out.println("B");
		i += 2;
	}
}
class Demo extends Super
{
	
	public Demo(String a)
	{	
		//super();
		System.out.println("C");
		i += 5;
	}
	public static void main(String[] args)
	{
		int i = 4;
		Super d = new Demo("A");
		System.out.println(d.i);
	}
}

//程序结果：B 
//  		C	
//		    7
*/


/*
interface Inter
{
	void show(int a, int b);
	void func();
}

class Demo
{
	public static void main(String[] args)
	{
		//补足代码：调用两个函数，要求用匿名内部类
		Inter in = new Inter() 
		{
			public void show(int a, int b)
			{}
			public void func()
			{}
		};
		in.show(3,4);
		in.func();
	}
}
*/


/*    //	写出程序结果

class TD
{
	int y = 6 ;
	class Inner
	{
		static int y = 3;
		void show()
		{
			System.out.println(y);
		}
	}
}

class Demo
{
	public static void main(String[] args)
	{
		TD.Inner ti = new TD（).new Inner();
		ti.show();
	}
}

*/


/*  选择题，写出错误答案错误的原因，用单行注释的方式。

class Demo
{
	int show(int a, int b){return 0;}
}
下面哪些函数可以存在于Demo的子类中。
A.public int show(int a,int b){return 0;}
B.private int show(int a,int b){return 0;}
C.private int show(int a,long b){return 0;}
D.public short show(int a,int b){return 0;}
E.static int show(int a,int b){return 0;}
*/

/*
写出this关键字的含义，final有哪些特点？

*/


/* //写出程序结果：
class Fu
{
	int num = 4;
	void show()
	{
		System.out.println("showFu");
	}
}

class Zi extends Fu
{
	//super();
	int num = 5;
	void show()
	{
		System.out.println("showZi");
	}
}

class Demo
{
	public static void main(String[] args)
	{
		Fu f = new Zi();
		Zi z = new Zi();
		System.out.println(f.num);
		System.out.println(z.num);
		f.show();
		z.show();
	}
}


程序结果：4
		  5
		showZi
		showZi
		*/


/*
interface A
{
	void show();
}

interface B
{
	void add(int a, int b);
}

class C implements A,B
{
	//程序代码
	//private int x,y;
	private int sum;
	
	public void add(int x, int y)
	{
		//this.x = x;
		//this.y = y;
		sum = x + y;
	}

	public void show()
	{
		//System.out.println(x+y);
		System.out.println(sum);
	}
}

class Demo
{
	public static void main(String[] args)
	{
		C c = new C();
		c.add(4,2);
		c.show();//通过该函数打印以上两个数的和
	}
}
*/


/*
//写出程序结果

class Demo
{
	public static void main(String[] args)
	{
		try
		{
			showExce();
			System.out.println("A");
		}
		catch (Exception e)
		{
			System.out.println("B");
		}
		finally
		{
			System.out.println("C");
		}
		System.out.println("D");
	}
	public static void showExce() throws Exception
	{
		throw new Exception();
	}
}


*/


/*  //写出程序结果
class Super
{
	int i = 0;
	public Super(String s)
	{
		i = 1;
	}
}

class Demo extends Super
{
	public Demo(String s)
	{
		//super();  
		i = 2;
	}
	public static void main(String[] args)
	{
		Demo d = new Demo();
		System.out.println(d.i)
	}

}
*/

/*	//写出程序结果

class Demo
{
	public static void func()
	{
		try
		{
			throw new Exception();
			System.out.println("A");
		}
		catch (Exception e)
		{
			System.out.println("B");
		}
	}
	public static void main(String[] args)
	{
		try
		{
			func();
			
		}
		catch (Exception e)
		{
			System.out.println("C");
		}
		System.out.println("D");
	}
}
*/


/*
class Demo
{
	public void func()
	{
		//位置1；

	}
	class Inner
	{
	}
	public static void main(String[] args)
	{
			Demo d = new Demo();
			//位置2
	}
}

/*
A，在位置1写 new Inner();			
B，在位置2写 new Inner();			
C，在位置2写 new d.Inner();			
D，在位置2写 new Demo.Inner();		

*/

/*
class Exc0 extends Exception{}
class Exc1 extends Exc0{}

class Demo
{
	public static void main(String[] args)
	{
		try
		{
			throw new Exc1();
		}
		catch (Exception e)
		{
			System.out.println("Exception");
		}
		catch(Exc0 e)
		{
			System.out.println("Exc0");
		}
	}
}
*/


/*
interface Test
{
	void func();
}

class Demo
{
	public static void main(String[] args)
	{
		//补足代码；（匿名内部类）调用show方法

	
	}
	void show(Test t)
	{
		t.func();
	}
}
*/


/*	//写出程序结果

class Demo
{
	public static String output = "";
	public static void foo(int i)
	{
		try
		{
			if( i == 1)
					throw new Exception();
			output += "1";
		}
		catch (Exception e)
		{
			output += "2";
			return;
		}
		finally
		{
			output+="3";
		}
		output+="4";
	}
	public static void main(String[] args)
	{
		foo(0);
		System.out.println(output);
		foo(1);
		System.out.println(output);
	}
}

*/


/*
建立一个图形接口，声明一个面积函数。圆形和矩形都实现这个接口，并得出两个函数的面积。
注意：体现面向对象的特征，对数值进行判断。用异常处理。不合法的数值要出现“这个数值是非法的”提示，不再进行运算。
*/

/*

*/


	
/*	//写出程序结果
public class Demo
{
	public static int j = 0;
	private static boolean methodB(int k)
	{
		j += k;
		return true;
	}
	public static void methodA(int i)
	{
		boolean b;
		b = i < 10 | methodB(4); // 
		b = i < 10 || methodB(8);// 
	}						     // 
								 // 

	public static void main(String[] args)
	{
		methodA(0);
		System.out.println(j);
	}
}
*/


/*
在一个类中编写一个方法，这个方法搜索一个字符数组是否存在某个字符，
如果存在，则返回这个字符在字符数组中第一次出现的位置（序号从0开始计算）。
否则，返回-1。要搜索的字符数组和字符都以参数形式传递传递给该方法。
如果传入的数组为null，应抛出illegalArgumentException异常。
在类的main方法中以各种可能出现的情况测试验证该方法编写的是否正确。
例如，字符不存在，字符存在，传入的数组为null等等。
*/


class illegalArgumentException extends RuntimeException
{
	illegalArgumentException()
	{
		super();
	}
	illegalArgumentException(String message)
	{
		super(message);
	}
}

class Index
{	
	public int getIndex(String[] arr,String key)
	{
		if (arr == null)
			throw new illegalArgumentException("数组不能为空！");
		for (int x =0 ; x < arr.length ; x++)
		{
			if (arr[x] == key)
				return x;
		}
				return -1;
	}
}

class Demo
{
	public static void main(String[] args)
	{
		String[] arr = new String[]{"a","1","ffff","g","%"};
		Index d = new Index();
		int num = d.getIndex(arr,"2");
		System.out.println("这个字符在字符数组中第一次出现的位置："+num);
	}
}


